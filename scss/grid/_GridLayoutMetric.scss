//
@property --cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --dir-x { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --dir-y { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --drag-x { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --drag-y { syntax: "<number>"; initial-value: 0; inherits: true; }

//
@property --p-drag-x { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --p-drag-y { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --p-cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --p-cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }

//
@property --grid-w { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --grid-h { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --grid-c { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --grid-r { syntax: "<number>"; initial-value: 0; inherits: true; }

//
@property --f-col { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --f-row { syntax: "<integer>"; initial-value: 0; inherits: true; }

//
@property --fc-cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --fc-cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --fp-cell-x { syntax: "<integer>"; initial-value: 0; inherits: true; }
@property --fp-cell-y { syntax: "<integer>"; initial-value: 0; inherits: true; }

//
@property --orient { syntax: "<number>"; initial-value: 0; inherits: true; }

//
@property --r-gap {
    syntax: "<length-percentage>";
    initial-value: 0px;
    inherits: true;
}

//
@property --c-gap {
    syntax: "<length-percentage>";
    initial-value: 0px;
    inherits: true;
}

//
@property --layout-r {
    syntax: "<integer>";
    initial-value: 1;
    inherits: true;
}

//
@property --layout-c {
    syntax: "<integer>";
    initial-value: 1;
    inherits: true;
}

//
@property --c-shift-mod {
    syntax: "<number>";
    initial-value: 0;
    inherits: true;
}

//
@property --r-shift-mod {
    syntax: "<number>";
    initial-value: 0;
    inherits: true;
}

//
@mixin calculateMetric() {
    //
    --p-cell-x: var(--cell-x);
    --p-cell-y: var(--cell-y);

    // CLAMPED GRID
    --f-col: clamp(4, var(--layout-c, 4), 6);
    --f-row: clamp(8, var(--layout-r, 8), 12);

    //
    --fc-cell-x: calc(clamp(0, var(--cell-x), calc(var(--f-col) - 1)) + 1);
    --fc-cell-y: calc(clamp(0, var(--cell-y), calc(var(--f-row) - 1)) + 1);

    //
    --fp-cell-x: calc(clamp(0, var(--p-cell-x), calc(var(--f-col) - 1)) + 1);
    --fp-cell-y: calc(clamp(0, var(--p-cell-y), calc(var(--f-row) - 1)) + 1);

    //
    --dir-x: calc(var(--fc-cell-x) - var(--fp-cell-x));
    --dir-y: calc(var(--fc-cell-y) - var(--fp-cell-y));
}

// when houdini not supported, also do gaps (include edges)...
@layer ux-grid-layout {
    .ux-grid-layout {
        container-name: ux-grid;
        container-type: size;
        contain: size layout;

        //
        & > :where(*) {
            @include calculateMetric();
            --icon-size: min(calc(100cqmin / min(var(--layout-c), var(--layout-r)) - max(var(--c-gap), var(--r-gap))), 4rem);
            --grid-c: calc(var(--fc-cell-x) + var(--c-shift-mod, 0));
            --grid-r: calc(var(--fc-cell-y) + var(--r-shift-mod, 0));

            //
            place-self: center;
        }

        //
        & > :where(*[data-dragging]) {
            --grid-c: calc(var(--fc-cell-x) + var(--c-shift-mod, 0));
            --grid-r: calc(var(--fc-cell-y) + var(--r-shift-mod, 0));
        }
    }
}
