@use "../core/CMixins" as cm;
@use "../core/Logic" as lg;

//
@property --inline-offset-iv { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
@property --inline-offset-ni { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
@property --inline-offset    { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }

//
@property --block-offset-iv { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
@property --block-offset-ni { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
@property --block-offset    { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }

//
@property --ox-layout-c { syntax: "<integer>"; initial-value: 1; inherits: true; }
@property --ox-layout-r { syntax: "<integer>"; initial-value: 1; inherits: true; }

//
@property --ox-orient { syntax: "<integer>"; initial-value: 0; inherits: true; }

//
@property --ox-c { syntax: "<number>"; initial-value: 0; inherits: true; }
@property --ox-r { syntax: "<number>"; initial-value: 0; inherits: true; }

//
@property --ox-col-size { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }
@property --ox-row-size { syntax: "<length-percentage>"; initial-value: 0px; inherits: true; }

//
@layer ux-grid-layout {

    //
    @supports not (display: layout(grid-page)) {
        .ux-grid-layout {
            //
            display: block;
            position: relative;

            //
            --ox-orient: var(--orient, 0);//rem(var(--orient), 2);
            --ox-layout-c: #{lg.mix(var(--layout-r), var(--layout-c), var(--ox-orient))};
            --ox-layout-r: #{lg.mix(var(--layout-c), var(--layout-r), var(--ox-orient))};

            //
            & > :where(*) {
                will-change: inset, --ox-column, --ox-row, --grid-c, --grid-r, --translate-x, --translate-y;

                //
                --ox-c: calc(#{lg.mix(var(--grid-r), var(--grid-c), var(--ox-orient))} - 1);
                --ox-r: calc(#{lg.mix(var(--grid-c), var(--grid-r), var(--ox-orient))} - 1);

                //
                --ox-col-size: calc(100cqi / var(--ox-columns));
                --ox-row-size: calc(100cqb / var(--ox-rows));

                //
                --inline-offset-ni: calc(var(--ox-column) * var(--ox-col-size));
                --inline-offset-iv: calc(calc(var(--ox-columns) - var(--ox-column) - 1) * var(--ox-col-size));
                --inline-offset: #{lg.mix(
                    var(--inline-offset-ni),
                    var(--inline-offset-iv),
                    lg.lor(lg.eq(var(--orient), 0), lg.eq(var(--orient), 1))
                )};

                //
                --block-offset-ni: calc(var(--ox-row) * var(--ox-row-size));
                --block-offset-iv: calc(calc(var(--ox-rows) - var(--ox-row) - 1) * var(--ox-row-size));
                --block-offset: #{lg.mix(
                    var(--block-offset-ni),
                    var(--block-offset-iv),
                    lg.lor(lg.eq(var(--orient), 0), lg.eq(var(--orient), 3))
                )};

                //
                position: absolute;

                //
                inset-inline-start: calc(var(--inline-offset, 0px) + var(--ox-col-size) / 2);
                inset-block-start: calc(var(--block-offset, 0px) + var(--ox-row-size) / 2);
                inset-inline-end: auto;
                inset-block-end: auto;

                //
                transform: translate(
                    calc(var(--translate-x) - 50%),
                    calc(var(--translate-y) - 50%)) scale(var(--scale, 1));
            }
        }
    }

}
