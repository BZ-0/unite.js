/* 
 * There is color constants (of dynamic colors)
 */

@use "./ColorUtils" as cu;
@use "./ColorVars" as cl;


@mixin ux-accent {
    --theme-surface-color: #{cl.$baseColor};
    --theme-glyph-color: oklch(from #{cl.$baseColor} calc(sign(calc(0.5 - l)) * 0.5 + 0.5) calc(c * 0.01) h);
}

@mixin ux-solid {
    --theme-glyph-color: #{cu.theme-mod-down(cl.$baseColor, 90%)};
    --theme-surface-color: #{cu.theme-mod-up(cl.$baseColor, 90%)};
}

@mixin ux-inverse {
    --theme-glyph-color: #{cu.theme-mod-up(cl.$baseColor, 90%)};
    --theme-surface-color: #{cu.theme-mod-down(cl.$baseColor, 90%)};
}

@mixin ux-inverse {
    --theme-glyph-color: #{cu.theme-mod-up(cl.$baseColor, 90%)};
    --theme-surface-color: #{cu.theme-mod-down(cl.$baseColor, 90%)};
}

@mixin ux-accent-inverse {
    --theme-surface-color: oklch(from #{cl.$baseColor} calc(sign(calc(0.5 - l)) * 0.8 * 0.5 + 0.5) calc(c * 0.2) h);
    --theme-glyph-color: oklch(from #{cl.$baseColor} calc(sign(l - 0.5) * 0.8 * 0.5 + 0.5) calc(c * 0.2) h);
}

@mixin ux-transparent {
    --theme-surface-color: transparent;
    --theme-glyph-color: oklch(from #{cl.$baseColor} calc(sign(calc(0.5 - l)) * 0.5 + 0.5) calc(c * 0.01) h);
}

@mixin ux-solid-transparent {
    --theme-surface-color: transparent;
    --theme-glyph-color: #{cu.theme-mod-down(cl.$baseColor, 90%)};
}



//
@layer ux-colors {

    :root, :where(html) {
        --theme-is-dark: 0; color-scheme: light;
        @media (prefers-color-scheme: light) { --theme-is-dark: 0; color-scheme: light; }
        @media (prefers-color-scheme: dark)  { --theme-is-dark: 1; color-scheme: dark; }
    }
    
    //
    :root, :host, :scope, :where(html, body, .ux-solid) {
        --theme-glyph-color: #{cl.$glyphColor};
        --theme-surface-color: #{cl.$surfaceColor};
        --theme-accent-color: #{cl.$accentColor};
        --theme-chroma-color: #{cl.$chromaColor};
        --highlight-coefficient: 0.0;
    }
    
    //
    :root, :host, :scope, :where(*, *::before, *::after) {
        --theme-chroma-mod: oklch(from #{cl.$baseColor} l 0.99 h);
        --theme-black-mod: oklch(from #{cl.$baseColor} 0.01 0.01 h);
        --theme-white-mod: oklch(from #{cl.$baseColor} 0.99 0.01 h);

        //
        --theme-dark-down-mod: color-mix(in oklch, var(--theme-black-mod) 98%, #{cl.$baseColor});
        --theme-dark-up-mod: color-mix(in oklch, var(--theme-white-mod) 90%, #{cl.$baseColor});

        //
        --theme-light-down-mod: color-mix(in oklch, var(--theme-white-mod) 98%, #{cl.$baseColor});
        --theme-light-up-mod: color-mix(in oklch, var(--theme-black-mod) 90%, #{cl.$baseColor});
    }
    
    //
    :root, :host, :scope, :where(html, body, *, *::before, *::after) {
        --current-glyph-color: var(--theme-glyph-color);
        --current-surface-color: #{cu.theme-mod-down(var(--theme-surface-color), calc(var(--highlight-coefficient) * 1%))};
        --current-accent-color: var(--theme-accent-color);
        --current-chroma-color: var(--theme-chroma-color);
        
        //
        @include cu.var-dependent();
        
        //
        //:where(*) {
            --highlight-transition-duration: 0.2s;
            --highlight-transition-mode: linear;
            --highlight-transition-property: --highlight-coefficient;
            transition: var(--highlight-transition-property) var(--highlight-transition-duration) var(--highlight-transition-mode);
        //}
        
        //
        @supports(color: light-dark(white, black)) {
            @include cu.scheme-dependent;
        }
    }
    
    :root {
		--range-slider:          #{cu.theme-mod-up(cl.$baseColor, 90%)};; /* slider main background color */
		--range-handle-inactive: #{cu.theme-mod-up(cl.$baseColor, 80%)};; /* inactive handle color */
		--range-handle:          #{cu.theme-mod-up(cl.$baseColor, 20%)};; /* non-focussed handle color */
		--range-handle-focus:    #{cu.theme-mod-up(cl.$baseColor, 10%)}; /* focussed handle color */
		--range-handle-border:   var(--range-handle); /* handle border color */
		--range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */
		--range-range:           var(--range-handle-focus); /* active range background color */
		--range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */
		--range-float:           var(--range-handle-focus); /* floating label background color */
		--range-float-text:      #{cu.theme-mod-up(cl.$baseColor, 100%)};; /* text color on floating label */
	}
	
	:root, :host, :scope, :where(body), :where(.ux-default-theme), :where(*, *::before, *::after) {
        accent-color: var(--current-glyph-color);
        color: var(--current-glyph-color);
        background-color: var(--current-surface-color);
        stroke: var(--current-glyph-color);
        
        //
        ::selection {
            background: var(--current-glyph-color);
            color: var(--current-surface-color);
        }
        
        //
        & :where(svg) {
            stroke: var(--current-glyph-color);
        }
	}

	//
    @media screen and ((hover: hover) or (pointer: fine)) {
        *[data-highlight-hover="1"]:hover { --highlight-coefficient: 6; }
        *[data-highlight-hover="2"]:hover { --highlight-coefficient: 12; }
        *[data-highlight-hover="3"]:hover { --highlight-coefficient: 16; }
    }

    //
    @media screen and (hover: none) and (pointer: coarse) {
        *[data-highlight-hover="1"]:active { --highlight-coefficient: 6; }
        *[data-highlight-hover="2"]:active { --highlight-coefficient: 12; }
        *[data-highlight-hover="3"]:active { --highlight-coefficient: 16; }
    }
    
    //
    *[data-highlight="1"] { --highlight-coefficient: 6; }
    *[data-highlight="2"] { --highlight-coefficient: 12; }

    //
    *[data-theme="dark"] { --theme-is-dark: 1; color-scheme: dark; }
    *[data-theme="light"] { --theme-is-dark: 0; color-scheme: light; }

    //
    *[data-scheme="accent"] { @include ux-accent; }
    *[data-scheme="solid"] { @include ux-solid; }
    *[data-scheme="inverse"] { @include ux-inverse; }
    *[data-scheme="accent-inverse"] { @include ux-accent-inverse; }
    *[data-scheme="transparent"] { @include ux-transparent; }
    *[data-scheme="solid-transparent"] { @include ux-solid-transparent(); }

    //
    :where(span) {
        --theme-surface-color: transparent;
        background-color: transparent;
    }
	
	//
	:where(svg) {
        --theme-surface-color: transparent;
        background-color: transparent;
        stroke: var(--current-glyph-color);
	}
	
	//
	:where(x-scrollbox) {
        --sb-color: #{cu.theme-mod-down(cu.theme-mod-up(cl.$baseColor, 80%), 20%)};
	}




    // TODO! deprecated!
    ////////////////////

    //
    .force-light { --theme-is-dark: 0; color-scheme: light; }
    .force-dark { --theme-is-dark: 1; color-scheme: dark; }

    //
	:where(.ux-accent) { @include ux-accent; }
	:where(.ux-solid) { @include ux-solid; }
    :where(.ux-inverse) { @include ux-inverse; }
    :where(.ux-accent-inverse) { @include ux-accent-inverse; }
    :where(.ux-transparent) { @include ux-transparent; }
	:where(.ux-solid-transparent) { @include ux-solid-transparent; }

}
