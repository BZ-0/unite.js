/* 
 * There is color constants (of dynamic colors)
 */

@use "./ColorUtils" as cu;
@use "./ColorVars" as cl;

//
@layer ux-colors {
    :root, :host, :scope, :where(html, body, .ux-solid) {
        --theme-glyph-color: #{cl.$glyphColor};
        --theme-surface-color: #{cl.$surfaceColor};
        --theme-accent-color: #{cl.$accentColor};
        --theme-chroma-color: #{cl.$chromaColor};
        --highlight-coefficient: 0.0;
    }
    
    //
    :root, :host, :scope, :where(html, body, *) {
        --current-glyph-color: var(--theme-glyph-color);
        --current-surface-color: #{cu.theme-mod-down(var(--theme-surface-color), calc(var(--highlight-coefficient) * 1%))};
        --current-accent-color: var(--theme-accent-color);
        --current-chroma-color: var(--theme-chroma-color);
    }
    
    :root {
		--range-slider:          #{cu.theme-mod-up(cl.$baseColor, 90%)};; /* slider main background color */
		--range-handle-inactive: #{cu.theme-mod-up(cl.$baseColor, 80%)};; /* inactive handle color */
		--range-handle:          #{cu.theme-mod-up(cl.$baseColor, 20%)};; /* non-focussed handle color */
		--range-handle-focus:    #{cu.theme-mod-up(cl.$baseColor, 10%)}; /* focussed handle color */
		--range-handle-border:   var(--range-handle); /* handle border color */
		--range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */
		--range-range:           var(--range-handle-focus); /* active range background color */
		--range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */
		--range-float:           var(--range-handle-focus); /* floating label background color */
		--range-float-text:      #{cu.theme-mod-up(cl.$baseColor, 100%)};; /* text color on floating label */
	}
	
	:root, :host, :scope, :where(body), :where(.ux-default-theme), :where(*) {
        accent-color: var(--current-glyph-color);
        color: var(--current-glyph-color);
        background-color: var(--current-surface-color);
        stroke: var(--current-glyph-color);
        
        //
        ::selection {
            background: var(--current-glyph-color);
            color: var(--current-surface-color);
        }
        
        //
        & :where(svg) {
            stroke: var(--current-glyph-color);
        }
	}
	
	//
	:where(.ux-transparent, svg) {
        --theme-surface-color: transparent;
	}
	
	//
	:where(svg) {
        background-color: transparent;
	}
	
	//
    @media not ((hover: none) and (pointer: coarse)) {
        .hl-1h:hover { --highlight-coefficient: 6; }
        .hl-2h:hover { --highlight-coefficient: 10; }
        .hl-3h:hover { --highlight-coefficient: 16; }
    }

    //
    @media (hover: none) and (pointer: coarse) {
        .hl-1h:active { --highlight-coefficient: 6; }
        .hl-2h:active { --highlight-coefficient: 12; }
        .hl-3h:active { --highlight-coefficient: 16; }
    }
    
    .hl-1 { --highlight-coefficient: 6; }
    .hl-2 { --highlight-coefficient: 12; }; 
    .hl-ns { --highlight-coefficient: 3; }
    .hl-ms { --highlight-coefficient: 4.5; }

    //
    .force-light { --theme-is-dark: 0; color-scheme: light; }
    .force-dark { --theme-is-dark: 1; color-scheme: dark; }

	
}
